#!/usr/bin/python
#
# Authenticate user using IMAP
#
# Copyright (c) 2011, Henrik Hallberg All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
#     * Redistributions of source code must retain the above copyright 
#       notice,this list of conditions and the following disclaimer.
# 
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer
#       in the documentation and/or other materials provided with the
#       distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

SERVER="some.imap.server"
PORT=993
SSL=True

CACHETEMPLATE="/tmp/imapauth-cache-"
CACHEEXPIRE=60*60 # One hour

import imaplib
import os
import sys
import stat
import time
import hashlib

connect = imaplib.IMAP4_SSL if SSL else imaplib.IMAP4
crypt = lambda s: hashlib.sha512(s).hexdigest()

user = sys.stdin.readline().strip()
pw = sys.stdin.readline().strip()

usercache=CACHETEMPLATE + user
cached = ''

# Check if we have a valid cache
try:
    with open(usercache, "r") as cache:
        fields = cache.readline().strip().split()

        if time.time() - float(fields[0]) < CACHEEXPIRE:
	    cached = fields[1]
except:
    pass

if cached == crypt(pw):
    # Password matches the previously authenticated
    sys.exit(0)


# Cache did not exist, had expired or didn't match. Let's remove it
try:
    os.remove(usercache)
except:
    pass


# Authenticate against server
try:
    M = connect(SERVER, PORT)
    M.login(user, pw)
except:
    sys.exit(1)


# Good login, cache it
try:
    with open(usercache, "w") as cache:
        cache.write("%s %s" % (time.time(), crypt(pw)))
    os.chmod(usercache, stat.S_IRUSR | stat.S_IWUSR)
except:
    pass

sys.exit(0)
